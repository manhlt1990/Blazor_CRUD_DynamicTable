@page "/dynamic-table/manage/{Id:int}"
@using Blazor.DynamicTable.Servives
@using Blazor.DynamicTable.Extensions
@using Newtonsoft.Json;
@using Blazor.DynamicTable.ViewModel
@inject NavigationManager UrlNavigationManager
@inject IDynamicTableService  dynamicTableService
@inject IQueryDynamicTableService  queryDynamicTableService

<EditForm Model="model" OnValidSubmit="SaveDynamicTable">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div class="form-group row">
        <label class="control-label col-md-12">Name</label>
        <div class="col-md-4">
            <input class="form-control" @bind="model.Name" />
        </div>
    </div>
    <div class="form-group row">
        <label class="control-label col-md-12">Table Name</label>
        <div class="col-md-4">
            <input class="form-control" @bind="model.TableName" />
        </div>
    </div>
    <div class="form-group row">
        @foreach (var tableProperties in model.TableProperties)
        {
            <div class="col-sm-3">
                <div class="form-group row">
                    <label class="control-label col-md-12">Name Column</label>
                    <div class="col-md-12">
                        <input class="form-control" @bind="tableProperties.Name" />
                    </div>
                </div>
            </div>
            <div class="col-sm-3">
                <div class="form-group row">
                    <label class="control-label col-md-12">Is Not Null</label>
                    <div class="col-md-12">
                        <input type="checkbox" class="form-control" @bind="tableProperties.NotNull" />
                    </div>
                </div>
            </div>
            <div class="col-sm-3">
                <div class="form-group row">
                    <label class="control-label col-md-12">Type</label>
                    <div class="col-md-12">
                        <select class="form-control" @bind="tableProperties.Type">
                            <option value="1">Number</option>
                            <option value="2">Text</option>
                            <option value="3">Date</option>
                        </select>
                    </div>
                </div>
            </div>
            <div class="col-sm-3">
                <div class="form-group row">
                    <label class="control-label col-md-12">Max lenght</label>
                    <div class="col-md-12">
                        <input type="number" class="form-control" @bind="tableProperties.MaxLenght" />
                    </div>
                </div>
            </div>
        }
    </div>
    <div class="form-group">
        <button type="submit" class="btn btn-primary">Save</button>
        <button class="btn btn-light" @onclick="Cancel">Cancel</button>
    </div>
</EditForm>


@code {

    [Parameter]
    public int Id { get; set; }

    public bool isUpdated { get; set; }
    public DynamicTableManageViewModel model { get; set; }

    protected override void OnInitialized()
    {
        isUpdated = Id > 0;
        model = new DynamicTableManageViewModel();
        if (isUpdated)
        {
            var table = dynamicTableService.GetByTableId(Id);
            model.Id = table.Id;
            model.Name = table.Name;
            model.TableName = table.TableName;
            model.TableProperties = JsonConvert.DeserializeObject<List<TableProperty>>(table.TableProperty);
        }
        int counter = 1;
        for (counter = 1; counter <= 5 - model.TableProperties.Count(); counter++)
        {
            model.TableProperties.Add(new TableProperty());
        }
    }

    protected async Task SaveDynamicTable()
    {
        var dynamicTable = new Context.DynamicTable
        {
            Id = model.Id,
            Name = model.Name,
            TableName = model.TableName,
            TableProperty = JsonConvert.SerializeObject(model.TableProperties.Where(p => !string.IsNullOrEmpty(p.Name)))
        };

        if (isUpdated)
        {
            dynamicTableService.Update(dynamicTable);
        }
        else
        {
            dynamicTable.Id = 0;
            dynamicTableService.Add(dynamicTable);
        }
        queryDynamicTableService.CreateInstance(dynamicTable);
        Cancel();
    }

    public void Cancel()
    {
        UrlNavigationManager.NavigateTo("/dynamic-table");
    }
}
